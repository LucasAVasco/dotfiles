#!/bin/bash
#
# Open a file or URI according to the following rules:
# * Open all text files with Neovim in a new window
# * Open directories with the default file manager in a new window
# * Open git commits
# * Open other files and URI with `xdg-open`
#
# Additional Features:
# * Support to open text files in a specific line with the '#line number' and ':line number' suffixes
# * Support to open text files in a specific line with the '+line number' argument
#
# This script only support to open one file at the same command. To open several files, the user need to call this script multiple times.
# One per file
#
# This script can open a custom URI related to git: 'git://'. This is not a standard URI. I created it to use with my scripts. See the
# supported sub-protocols in the `open_git()` function
#
# Usage:
# $1 file path or URI to open
# $2..n: arguments to be passed to the application that will open the file or URI
#
# Dependencies:
# * bash
# * xdg-open
# * git
# * notify-send
# * uname (to query the local host name)
# * `file` command (to query the file mime type)
# * The `nvim_new_win` and `default_file_manager` scripts


set -e


# Open a generic path (file or folder)
#
# Open files in Neovim. Open folders with the default file manager. Always open in a new window
#
# $1: Path of the file or folder to open
# $2..n: Arguments passed to the application that will open the file or folder
open_path() {
	# File
	if [[ -f "$1" ]]; then
		file_cmd_response=($(file --mime-type "$1"))
		mime_type="${file_cmd_response[1]}"

		# Only open text files with Neovim
		if [[ "$mime_type" =~ ^text/ ]]; then
			exec nvim_new_win "$1" "${@:2}"
		fi

		# Fallback
		exec xdg-open "$1" "${@:2}"
	
	# Directory
	elif [[ -d "$1" ]]; then
		exec default_file_manager "$1" "${@:2}"

	else
		notify-send "The provided file or folder does not exist: '$2'"
	fi
}



# Open a URI related to git
#
# This is not a standard URI. I created it to use with my scripts. This function can open a 'git://' URI in a predefined application
# (usually the web-browser) with `xdg-open`
#
# This 'git' URI support some sub-protocols (can be extended):
#
# * commit: open a commit in the web-browser. The URI need to match the following pattern:
# 'git://commit/<remote>/<commit>/#<path to local repository>', or 'git://commit/<remote>/<commit>/' to use the current repository.
# Examples: 'git://commit/origin/a1esdq123/#/home/user/my_git_repo/' or 'git://commit/origin/a1esdq123'. Note: the <commit> can be the short
# version of the commit. This function will query the full version to use
#
# Parameters:
# $1: URI following the previous formats
# $2..n: Arguments passed to the application that will open the URI
open_git() {

	# Get the information related to git
	IFS=$'/'
	uri=(${1#git://})
	unset IFS

	case "${uri[0]}" in
		commit)
			remote_name="${uri[1]}"
			commit="${uri[2]}"

			# Path to the repository
			IFS=$'#'
			repo_dir=($1)
			unset IFS
			repo_dir="${repo_dir[1]}"

			# Complete the missing information
			if [[ -n "$repo_dir" ]]; then  # Repository path (local machine) is provided
				git_dir_arg="--git-dir=$repo_dir/.git"
				repo_url=$(git "$git_dir_arg" remote get-url "$remote_name")
				commit=$(git "$git_dir_arg" rev-parse "$commit")  # Full version of the commit
			
			else  # Local repository path is not provided (use the current repository)
				repo_url=$(git remote get-url "$remote_name")
				commit=$(git rev-parse "$commit")  # Full version of the commit
			fi

			# If it is a GitHub repository
			if [[ "$repo_url" =~ github ]]; then
				exec xdg-open "$repo_url/commit/$commit" "${@:2}"
			fi
			;;

		*)
			notify-send "Unknown git sub-protocol! Recived: '$1' Aborting..."
			exit 1
			;;
	esac
}

# Removes the 'file://' URI prefix in the provided file path
file_path="${1#file://}"


# Removes an empty line number indicator.
# Example: 'file-path:' will become 'file-path'
# The last ':' does not point to a file line, so it must be removed from the file path
if [[ "$file_path" =~ \#$ ]]; then
	file_path="${file_path%%#}"

elif [[ "$file_path" =~ \:$ ]]; then
	file_path="${file_path%%:}"
fi


# Removes the name of the current host, if added to the path
current_hostname=$(uname -n)
file_hostname="${file_path%%/*}"
[[ "$file_hostname" == '' ]] && file_hostname="$current_hostname"  # The file is in the local host If no host name is provided
file_path="${file_path#${current_hostname}}"


# Expand the provided file or folder path (replaces the '~' by the user home if it is the first character of the path)
if [[ "${file_path:0:1}" == '~' ]]; then
	file_path="$HOME${1:1}"
fi


# Line number indicator. Some applications can output the file URI as file://<path>#<line number> or file://<path>:<line number> to mark a
# specific line position. Need to get the line number and remove it form the file path. The line number need to be prefixed by a '+'
# character to be used with Neovim
line_number=''

if [[ "$1" =~ \#[0-9]+ ]]; then   # Line number is after a '#'
	line_number="+${file_path##*#}"
	file_path="${file_path%#*}"

elif [[ "$1" =~ \:[0-9]+ ]]; then # Line number is after a ':'
	line_number="+${file_path##*:}"
	file_path="${file_path%:*}"
fi


# Define how to process the provided file or folder
if [[ "$1" =~ ^file:// ]]; then
	if [[ "$file_hostname" == "$current_hostname" ]]; then
		open_path "$file_path" $line_number "${@:2}"

	else
		# TODO(LucasAVasco): Implement the access to remote files
		notify-send 'The access to remote files is not implemented yet'
	fi

elif [[ "$1" =~ ^git:// ]]; then
	open_git "$@" "${@:2}"

elif [[ -f "$file_path" ]] || [[ -d "$file_path" ]]; then
	open_path "$file_path" $line_number "${@:2}"
fi


# Fallback option
exec xdg-open "$@"
