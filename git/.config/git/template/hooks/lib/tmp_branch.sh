#!/bin/bash
#
# Module to manage temporary branches. This branches are like normal branches, but only have temporary commits. A commit need to have
# a message that start with 'tmp(auto-backup):' to be considered as a temporary commit.
#
# Temporary commits must be created in a temporary branch. Temporary branches starts with 'tmp.$(git config user.name)'.
#
# Temporary commits only can be pushed to the temporary remote (its name is defined by the 'tmp_remote_name' variable). Temporary commits
# must not be uploaded to a remote that is not the temporary remote. Non-temporary commits must not be uploaded to a
# remote that is not the temporary remote.


tmp_commit_title_regex='^tmp\((.*)\)\!?: '                                      # Temporary commits need to have a title that matches this regex
tmp_branch_regex="^tmp\.$(git config user.name)\."                              # Regex to match the temporary branch name
automatic_tmp_branch_name="tmp.$(git config user.name).autogenerated.doNotUse"  # Name to use to create an automatic temporary branch
tmp_remote_name='my_tmp_repo'                                                   # Branch to push temporary commits

# NOTE: in order to user $tmp_commit_title_regex with grep, you need to add the '--perl-regexp' option


# Return 'true' if there is a temporary remote, 'false' otherwise. The returned values are strings
there_is_tmp_remote() {
	git remote | grep --fixed-strings "$tmp_remote_name" > /dev/null 2>&1 && echo 'true' || echo 'false'
}


# Get the temporary branch names in the local repository separated by spaces
get_local_tmp_branch_name() {
	# Assigns the names to a local array to remove new and empty lines
	local branches=($(git branch --format='%(refname)' | grep "$tmp_branch_regex" | cut -d'/' -f3))
	echo ${branches[@]}
}


# Get the temporary branch names in the remotes separated by spaces. Does not shows the local temporary branches
get_remote_tmp_branch_name() {
	# Assigns the names to a local array to remove new and empty lines
	local branches=($(git branch --format='%(refname)' --all | grep "$tmp_branch_regex" | cut -d'/' -f4))
	echo ${branches[@]}
}


# Return 'true' if there is a temporary branch in the local repository, 'false' otherwise. The returned values are strings
there_is_local_tmp_branch() {
	[[ "$(get_local_tmp_branch_name)" != '' ]] && echo 'true' || echo 'false'
}


# Return 'true' if there is a temporary branch in the remote repositories, 'false' otherwise. The returned values are strings
there_is_remote_tmp_branch() {
	[[ "$(get_remote_tmp_branch_name)" != '' ]] && echo 'true' || echo 'false'
}
